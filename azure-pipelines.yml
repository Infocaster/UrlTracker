trigger:
  branches:
    include:
    - v11/main
    - v11/develop
    - v11/release/*
    - v11/hotfix
  tags:
    include:
    - 11.*

pool:
  name: Default

variables: 
  BuildConfiguration: 'release'
  BuildPlatform: 'any cpu'
  Solution: '**\*.sln'
  NpmWorkingDirectory: 'src\UrlTracker.Backoffice.UI'
  PackageDownloadPatterns: |
    **/*.nupkg
    **/*.snupkg

stages:
- stage: build
  displayName: Build
  jobs:
  - job: build
    displayName: Build
    steps:
    - checkout: self
      displayName: Clone repository
      fetchDepth: 0
      clean: true

    - task: GitVersion@5
      displayName: GitVersion
      inputs:
        configFilePath: GitVersion.yml
        updateAssemblyInfo: true

    - task: NodeTool@0
      displayName: 'Use node 16.x'
      inputs:
        versionSpec: '16.x'

    - task: Npm@1
      displayName: 'Install front end packages'
      inputs:
        command: 'custom'
        workingDir: $(NpmWorkingDirectory)
        customCommand: 'ci --prefer-offline --no-audit'

    - task: Npm@1
      displayName: 'Build front end'
      inputs:
        command: 'custom'
        workingDir: $(NpmWorkingDirectory)
        customCommand: 'run build:webpack-production'

    - task: UseDotNet@2
      displayName: 'Use .NET 7'
      inputs:
        packageType: 'sdk'
        version: '7.x'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        feedsToUse: config
        nugetConfigPath: nuget.config

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: UrlTracker.sln
        arguments: '--configuration $(BuildConfiguration) -p:Version=$(GitVersion.NuGetVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: |
          test/UrlTracker.Core.Tests/UrlTracker.Core.Tests.csproj
          test/UrlTracker.Web.Tests/UrlTracker.Web.Tests.csproj
          test/UrlTracker.IntegrationTests/UrlTracker.IntegrationTests.csproj
        arguments: '--configuration $(BuildConfiguration) -p:Version=$(GitVersion.NuGetVersion) --collect "XPlat Code Coverage"'

    - script: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:$(Agent.WorkFolder)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura -assemblyfilters:+UrlTracker.*;-UrlTracker.Resources.*;-UrlTracker.*.Tests
      displayName: Create code coverage report

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: pack
        arguments: '--configuration $(BuildConfiguration) -p:Version=$(GitVersion.NuGetVersion)'
        packagesToPack: src/**/*.csproj
        versioningScheme: byEnvVar
        versionEnvVar: GitVersion.NuGetVersion

    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: dryrun
  displayName: Dry run
  dependsOn: build
  condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/tags/')))
  jobs:
  - job: download
    displayName: Test download
    workspace:
      clean: all
    steps:
    - checkout: none
    - download: current
      patterns: $(PackageDownloadPatterns)
      displayName: Download packages and symbols

- stage: release
  displayName: Release
  dependsOn: build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  variables:
    packageGlob: '$(Pipeline.Workspace)/**/UrlTracker*.nupkg'
    symbolsGlob: '$(Pipeline.Workspace)/**/UrlTracker*.snupkg'
  jobs:
  - job: releaseArtifact
    displayName: Push to artifacts
    workspace:
      clean: all
    steps:
    - checkout: none
    
    - download: current
      patterns: $(PackageDownloadPatterns)
      displayName: Download build artifact
    
    - task: DotNetCoreCLI@2
      displayName: 'Push package to artifacts'
      inputs:
        command: push
        publishVstsFeed: '3356baca-d7d8-497c-a5fa-ebd93f79f7c7'
        versioningScheme: byBuildNumber
        packagesToPush: $(packageGlob)
    
    - task: DotNetCoreCLI@2
      displayName: 'Push symbols to artifacts'
      inputs:
        command: push
        publishVstsFeed: '3356baca-d7d8-497c-a5fa-ebd93f79f7c7'
        versioningScheme: byBuildNumber
        packagesToPush: $(symbolsGlob)

  - job: releaseNuget
    displayName: Push to nuget
    workspace:
      clean: all
    steps:
    - checkout: none
    
    - download: current
      patterns: $(PackageDownloadPatterns)
      displayName: Download build artifact
    
    - task: DotNetCoreCLI@2
      displayName: 'push package to nuget.org'
      inputs:
        command: custom
        custom: nuget
        arguments: 'push $(packageGlob) -s https://api.nuget.org/v3/index.json --api-key $(NuGetApiKey)'