{"version":3,"sources":["../../uSync/changedialog.controller.js","../../uSync/usync.hub.js","../../uSync/usync.service.js","../../uSync/components/usync.progressview.component.js","../../uSync/components/usync.reportview.component.js","../../uSync/settings/expansion.controller.js","../../uSync/settings/settings.controller.js","../../uSync/settings/usync.controller.js","../../uSync/backoffice/usync/usync.dashboard.controller.js"],"names":["angular","module","controller","$scope","assetsService","vm","this","getTypeName","typeName","substring","lastIndexOf","item","model","loadJs","then","details","forEach","detail","index","oldValueDiff","oldValue","newValueDiff","newValue","oldValueJson","Object","JSON","stringify","newValueJson","diff","JsDiff","diffWords","close","pageTitle","change","itemType","name","factory","$rootScope","$q","starting","callbacks","scripts","Umbraco","Sys","ServerVariables","umbracoSettings","umbracoPath","initHub","callback","push","undefined","$","connection","promises","script","all","length","hubSetup","pop","signalR","HubConnectionBuilder","withUrl","uSync","signalRHub","withAutomaticReconnect","configureLogging","LogLevel","Warning","build","hub","active","start","cb","catch","console","warn","e","cd","on","eventName","result","$apply","invoke","methodName","done","$http","serviceRoot","uSyncService","getSettings","get","getChangedSettings","getHandlers","getHandlerSetSettings","set","report","group","clientId","post","exportItems","clean","importItems","force","put","importItem","saveSettings","settings","getActionHandlers","options","action","reportHandler","handler","importHandler","importPost","actions","exportHandler","cleanExport","startProcess","finishProcess","getLoadedHandlers","getAddOns","getAddOnSplash","getHandlerGroups","getSyncWarnings","checkVersion","uSyncProgressViewComponent","templateUrl","application","applicationPath","bindings","status","update","hideLabels","controllerAs","calcPercentage","count","total","component","uSyncReportViewComponent","results","hideAction","hideLink","showAll","hideToggle","allowSelect","selection","editorService","overlayService","uSync8DashboardService","hasFailedDetail","some","success","showChange","getIcon","getChangeClass","classString","exception","__selected","countChanges","changes","val","key","openDetail","title","view","open","$onInit","apply","applyState","error","select","_","findIndex","x","splice","appPluginsPath","size","disableBackdropClick","disableEscKey","disableSubmitButton","closeButtonLabelKey","loading","addons","data","notificationsService","working","readonly","docslink","umbracoVersion","version","Message","openAppSettingsOverlay","appSetting","toPascal","o","newO","origKey","newKey","value","Array","map","toCamel","hasOwnProperty","charAt","toUpperCase","slice","toString","constructor","content","hideSubmitButton","submit","confirm","setname","defaultSet","handlerSet","$controller","eventsService","localizationService","uSyncHub","fresh","versionLoaded","reported","syncing","showSpinner","showEverything","groups","perf","showAdvanced","hasuSyncForms","canHaveForms","modes","NONE","REPORT","IMPORT","EXPORT","performAction","actionMethod","resolve","reject","handlers","message","runHandlerAction","alias","getClientId","concat","performHandlerAction","importForce","resetStatus","getWarnings","state","performance","now","emit","time","duration","moment","savings","show","humanize","godo","calculateTimeSaved","ExceptionMessage","exceptionMessage","exportGroup","localizeMany","values","submitButtonLabel","closeButtonLabel","everything","warnings","importGroup","mode","runmode","connectionId","reportAction","icon","import","defaultButton","labelKey","subButtons","export","versionInfo","IsCurrent","umbType","indexOf","Total","isSingle","keys","groupInfo","toLowerCase","n","loadSavingsMessages","exportButtons","$timeout","navigationService","selectNavigationItem","page","description","navigation","syncTree","tree","path","addOnString","addOns","insertOffset","displayName"],"mappings":"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","file":"usync.9.3.1.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    function changeDialogController($scope, assetsService) {\r\n\r\n        var vm = this;\r\n        vm.item = $scope.model.item;\r\n\r\n        var jsdiff = 'lib/jsdiff/diff.min.js';\r\n\r\n        assetsService.loadJs(jsdiff, $scope).then(function () {\r\n            calcDiffs();\r\n        });\r\n\r\n        vm.close = close;\r\n        vm.getTypeName = getTypeName;\r\n        vm.pageTitle = pageTitle;\r\n\r\n        function close() {\r\n            if ($scope.model.close) {\r\n                $scope.model.close();\r\n            }\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            return typeName.substring(typeName.lastIndexOf('.') + 1);\r\n        }\r\n\r\n        function pageTitle() {\r\n            return vm.item.change + ' ' + getTypeName(vm.item.itemType) + ' ' + vm.item.name;\r\n        }\r\n\r\n        function calcDiffs() {\r\n\r\n            vm.item.details.forEach(function (detail, index) {\r\n\r\n\r\n                let oldValueDiff = detail.oldValue === null ? \"\" : detail.oldValue;\r\n                let newValueDiff = detail.newValue === null ? \"\" : detail.newValue;\r\n\r\n                if (detail.oldValueJson instanceof Object) {\r\n                    oldValueDiff = JSON.stringify(detail.oldValue, null, 1);\r\n                }\r\n\r\n                if (detail.newValueJson instanceof Object) {\r\n                    newValueDiff = JSON.stringify(detail.newValue, null, 1);\r\n                }\r\n\r\n                detail.diff = JsDiff.diffWords(oldValueDiff, newValueDiff );\r\n            });\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncChangeDialogController', changeDialogController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function uSyncHub($rootScope, $q, assetsService) {\r\n\r\n        var starting = false;\r\n        var callbacks = []; \r\n\r\n        var scripts = [\r\n            Umbraco.Sys.ServerVariables.umbracoSettings.umbracoPath + '/lib/signalr/signalr.min.js']\r\n\r\n        var resource = {\r\n            initHub: initHub\r\n        };\r\n\r\n        return resource;\r\n\r\n        //////////////\r\n\r\n        function initHub(callback) {\r\n\r\n            callbacks.push(callback);\r\n\r\n            if (!starting) {\r\n                if ($.connection === undefined) {\r\n                    starting = true;\r\n\r\n                    var promises = [];\r\n                    scripts.forEach(function (script) {\r\n                        promises.push(assetsService.loadJs(script));\r\n                    });\r\n\r\n                    $q.all(promises)\r\n                        .then(function () {\r\n                            while (callbacks.length) {\r\n                                var cb = callbacks.pop();\r\n                                hubSetup(cb);\r\n                            }\r\n                            starting = false;\r\n                        });\r\n                }\r\n                else {\r\n                    while (callbacks.length) {\r\n                        var cb = callbacks.pop();\r\n                        hubSetup(cb);\r\n                    }\r\n                    starting = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        function hubSetup(callback) {\r\n\r\n            $.connection = new signalR.HubConnectionBuilder()\r\n                .withUrl(Umbraco.Sys.ServerVariables.uSync.signalRHub)\r\n                .withAutomaticReconnect()\r\n                .configureLogging(signalR.LogLevel.Warning)\r\n                .build();\r\n\r\n            var hub = {};\r\n\r\n            if ($.connection !== undefined) {\r\n                hub = {\r\n                    active: true,\r\n                    start: function (cb) {\r\n\r\n                        try {\r\n                            $.connection.start().then(function () {\r\n                                // console.info('Hub started', $.connection.connectionId);\r\n                                if (cb) {\r\n                                    cb(true);\r\n                                }\r\n                            }).catch(function () {\r\n                                console.warn('Failed to start hub');\r\n                                if (cb) {\r\n                                    cb(false);\r\n                                }\r\n                            });\r\n                        } catch (e) {\r\n                            console.warn('Could not setup signalR connection', e);\r\n                            if (cd) {\r\n                                cb(false);\r\n                            }\r\n                        }\r\n\r\n                    },\r\n                    on: function (eventName, callback) {\r\n                        $.connection.on(eventName, function (result) {\r\n                            $rootScope.$apply(function () {\r\n                                if (callback) {\r\n                                    callback(result);\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    invoke: function (methodName, callback) {\r\n                        $.connection.invoke(methodName)\r\n                            .done(function (result) {\r\n                                $rootScope.$apply(function () {\r\n                                    if (callback) {\r\n                                        callback(result);\r\n                                    }\r\n                                });\r\n                            });\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                hub = {\r\n                    on: function () { },\r\n                    invoke: function () { },\r\n                    start: function () { console.warn('no hub to start - missing signalR library ?'); }\r\n                };\r\n            }\r\n\r\n            return callback(hub);\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco.resources')\r\n        .factory('uSyncHub', uSyncHub);\r\n})();","/**\r\n * @ngdoc\r\n * @name uSync8Service\r\n * @requires $http\r\n * \r\n * @description provides the link to the uSync api elements\r\n *              required for the dashboard to function\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    function uSyncServiceController($http) {\r\n\r\n        var serviceRoot = Umbraco.Sys.ServerVariables.uSync.uSyncService;\r\n\r\n        var service = {\r\n            getSettings: getSettings,\r\n            getChangedSettings: getChangedSettings,\r\n            getHandlers: getHandlers,\r\n            getHandlerSetSettings: getHandlerSetSettings,\r\n\r\n            report: report,\r\n            exportItems: exportItems,\r\n            importItems: importItems,\r\n            importItem: importItem,\r\n            saveSettings: saveSettings,\r\n\r\n            getActionHandlers: getActionHandlers,\r\n            reportHandler: reportHandler,\r\n            importHandler: importHandler,\r\n            importPost: importPost,\r\n            exportHandler: exportHandler,\r\n            cleanExport: cleanExport,\r\n\r\n            startProcess: startProcess,\r\n            finishProcess: finishProcess,\r\n\r\n            getLoadedHandlers: getLoadedHandlers,\r\n            getAddOns: getAddOns,\r\n            getAddOnSplash: getAddOnSplash,\r\n\r\n            getHandlerGroups: getHandlerGroups,\r\n\r\n            getSyncWarnings: getSyncWarnings,\r\n\r\n            checkVersion: checkVersion\r\n\r\n        };\r\n\r\n        return service;\r\n\r\n        /////////////////////\r\n\r\n        function getSettings() {\r\n            return $http.get(serviceRoot + 'GetSettings');\r\n        }\r\n\r\n        function getChangedSettings() {\r\n            return $http.get(serviceRoot + 'GetChangedSettings');\r\n        }\r\n\r\n        function getHandlerSetSettings(set) {\r\n            return $http.get(serviceRoot + 'GetHandlerSetSettings?id=' + set);\r\n        }\r\n\r\n        function getHandlers() {\r\n            return $http.get(serviceRoot + 'GetHandlers');\r\n        }\r\n\r\n        function getLoadedHandlers() {\r\n            return $http.get(serviceRoot + 'GetLoadedHandlers');\r\n        }\r\n\r\n        function getAddOns() {\r\n            return $http.get(serviceRoot + 'GetAddOns');\r\n        }\r\n\r\n        function getAddOnSplash() {\r\n            return $http.get(serviceRoot + 'GetAddOnSplash');\r\n        }\r\n\r\n\r\n        function report(group, clientId) {\r\n            return $http.post(serviceRoot + 'report', { clientId: clientId, group: group });\r\n        }\r\n\r\n        function exportItems (clientId, clean) {\r\n            return $http.post(serviceRoot + 'export', { clientId: clientId, clean: clean });\r\n        }\r\n\r\n        function importItems(force, group, clientId) {\r\n            return $http.put(serviceRoot + 'import',\r\n                {\r\n                    force: force,\r\n                    group: group,\r\n                    clientId: clientId\r\n                });\r\n        }\r\n\r\n        function getSyncWarnings(action, group) {\r\n            return $http.post(serviceRoot + 'GetSyncWarnings?action=' + action, { group: group });\r\n        }\r\n        \r\n\r\n        function importItem(item) {\r\n            return $http.put(serviceRoot + 'importItem', item);\r\n        }\r\n\r\n        function saveSettings(settings) {\r\n            return $http.post(serviceRoot + 'savesettings', settings);\r\n        }\r\n\r\n        function getHandlerGroups() {\r\n            return $http.get(serviceRoot + 'GetHandlerGroups');\r\n        }\r\n\r\n        function checkVersion() {\r\n            return $http.get(serviceRoot + 'CheckVersion');\r\n        }\r\n\r\n\r\n        function getActionHandlers(options) {\r\n            return $http.post(serviceRoot + 'GetActionHandlers?action=' + options.action,\r\n                {\r\n                    group: options.group\r\n                });\r\n        }\r\n\r\n        function reportHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ReportHandler', {\r\n                handler: handler,\r\n                clientId: clientId\r\n            });\r\n        }\r\n\r\n        function importHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ImportHandler', {\r\n                handler: handler,\r\n                clientId: clientId,\r\n                force: options.force\r\n            });\r\n        }\r\n\r\n        function importPost(actions, options, clientId) {\r\n            return $http.post(serviceRoot + 'ImportPost', {\r\n                actions: actions,\r\n                clientId: clientId\r\n            });\r\n        }\r\n\r\n        function exportHandler(handler, options, clientId) {\r\n            return $http.post(serviceRoot + 'ExportHandler', {\r\n                handler: handler,\r\n                clientId: clientId\r\n            });\r\n        }\r\n\r\n        function startProcess(action) {\r\n            return $http.post(serviceRoot + 'StartProcess?action=' + action);\r\n        }\r\n\r\n        function finishProcess(action, actions) {\r\n            return $http.post(serviceRoot + 'FinishProcess?action=' + action, actions);\r\n        }\r\n\r\n        function cleanExport() {\r\n            return $http.post(serviceRoot + 'cleanExport');\r\n        }\r\n    \r\n    }\r\n\r\n    angular.module('umbraco.services')\r\n        .factory('uSync8DashboardService', uSyncServiceController);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var uSyncProgressViewComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSync/components/usync.progressview.html',\r\n        bindings: {\r\n            status: '<',\r\n            update: '<',\r\n            hideLabels: '<'\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: uSyncProgressViewController\r\n    };\r\n\r\n    function uSyncProgressViewController() {\r\n        var vm = this;\r\n\r\n        vm.calcPercentage = calcPercentage;\r\n\r\n        function calcPercentage(status) {\r\n            if (status !== undefined && status.count !== undefined) {\r\n                return (100 * status.count) / status.total;\r\n            }\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncProgressView', uSyncProgressViewComponent);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    var uSyncReportViewComponent = {\r\n        templateUrl: Umbraco.Sys.ServerVariables.application.applicationPath + 'App_Plugins/uSync/components/usync.reportview.html',\r\n        bindings: {\r\n            action: '<',\r\n            results: '<',\r\n            hideAction: '<',\r\n            hideLink: '<',\r\n            showAll: '<',\r\n            hideToggle: '<',\r\n            allowSelect: '<',\r\n            selection: '='\r\n        },\r\n        controllerAs: 'vm',\r\n        controller: uSyncReportViewController\r\n    };\r\n\r\n    function uSyncReportViewController($scope, editorService,\r\n        overlayService, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.showChange = showChange;\r\n        vm.getIcon = getIcon;\r\n        vm.getChangeClass = getChangeClass;\r\n        vm.getTypeName = getTypeName;\r\n        vm.countChanges = countChanges;\r\n        vm.openDetail = openDetail;\r\n        vm.showAll = vm.showAll || false;\r\n\r\n        vm.$onInit = function () {\r\n            vm.hideLink = vm.hideLink ? true : false;\r\n            vm.hideAction = vm.hideAction ? true : false;\r\n        };\r\n\r\n\r\n        vm.apply = apply;\r\n        vm.status = status;\r\n\r\n        /////////\r\n\r\n        function showChange(change) {\r\n            return vm.showAll || (change !== 'NoChange' && change !== 'Removed');\r\n        }\r\n\r\n        function hasFailedDetail(details) {\r\n            if (details == null || details.length == 0) {\r\n                return false;\r\n            }\r\n\r\n            return details.some(function (detail) {\r\n                return !detail.success;\r\n            })\r\n        }\r\n\r\n        function getChangeClass(result) {\r\n\r\n            var classString = '';\r\n            if (vm.allowSelect || result.exception != null) {\r\n                classString = '-usync-can-select ';\r\n            }\r\n\r\n            if (result.__selected) {\r\n                classString += '-selected '\r\n            }\r\n\r\n            if (!result.success) {\r\n                return classString + 'usync-change-row-Fail';\r\n            }\r\n            else if (hasFailedDetail(result.details)) {\r\n                return classString + ' usync-change-row-Warn';\r\n            }\r\n\r\n            return classString + ' usync-change-row-' + result.change;\r\n        }\r\n\r\n        function getIcon(result) {\r\n            if (!result.success) {\r\n                return \"icon-delete color-red\";\r\n            }\r\n            else if (hasFailedDetail(result.details)) {\r\n                return \"icon-alert color-yellow\";\r\n            }\r\n            switch (result.change) {\r\n                case 'NoChange':\r\n                    return 'icon-check color-grey';\r\n                case 'Update':\r\n                    return 'icon-check color-orange';\r\n                case 'Delete':\r\n                    return 'icon-delete color-red';\r\n                case 'Import':\r\n                    return 'icon-check color-green';\r\n                case 'Export':\r\n                    return 'icon-check color-green';\r\n                default:\r\n                    return 'icon-flag color-red';\r\n            }\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            if (typeName !== undefined) {\r\n                return typeName.substring(typeName.lastIndexOf('.') + 1);\r\n            }\r\n            return \"??\";\r\n        }\r\n\r\n        function countChanges(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.change !== 'NoChange') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n        function openDetail(item) {\r\n\r\n            var options = {\r\n                item: item,\r\n                title: 'uSync Change',\r\n                view: Umbraco.Sys.ServerVariables.application.applicationPath + \"App_Plugins/uSync/changedialog.html\",\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n            editorService.open(options);\r\n        }\r\n\r\n        function apply(item) {\r\n\r\n            // do some application thing (apply just one item)\r\n            item.applyState = 'busy';\r\n            uSync8DashboardService.importItem(item)\r\n                .then(function (result) {\r\n                    item.applyState = 'success';\r\n                }, function (error) {\r\n                    console.error(error);\r\n                    item.applyState = 'error';\r\n                });\r\n        }\r\n\r\n        vm.select = select;\r\n\r\n        function select(item) {\r\n            if (vm.allowSelect && vm.selection !== undefined) {\r\n                var index = _.findIndex(vm.selection,\r\n                    (x) => (x.key == item.key && x.name == item.name)\r\n                );\r\n                if (index === -1) {\r\n                    vm.selection.push(item);\r\n                    item.__selected = true;\r\n                }\r\n                else {\r\n                    vm.selection.splice(index, 1);\r\n                    item.__selected = false; \r\n                }\r\n            }\r\n\r\n            if (item.exception != null) {\r\n\r\n                overlayService.open({\r\n                    view: Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/itemdialog.html',\r\n                    title: item.name,\r\n                    item: item,\r\n                    exception: item.exception,\r\n                    size: 'usync-error',\r\n                    disableBackdropClick: true,\r\n                    disableEscKey: true,\r\n                    disableSubmitButton: true,\r\n                    closeButtonLabelKey: 'general_close',\r\n                    close: function () {\r\n                        overlayService.close();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function status(item) {\r\n            if (item.applyState === undefined) return 'init';\r\n            return item.applyState;\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .component('usyncReportView', uSyncReportViewComponent);\r\n})();","(function () {\r\n\r\n    'use strict';\r\n\r\n    function expansionController($scope, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n        vm.loading = true;\r\n        ///\r\n\r\n        uSync8DashboardService.getAddOnSplash()\r\n            .then(function (result) {\r\n                vm.addons = result.data;\r\n                vm.loading = false;\r\n            });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncExpansionController', expansionController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function settingsController($scope,\r\n        uSync8DashboardService,\r\n        overlayService,\r\n        notificationsService) {\r\n\r\n        var vm = this;\r\n        vm.working = false;\r\n        vm.loading = true;\r\n        vm.readonly = true;\r\n\r\n        vm.docslink = \"https://docs.jumoo.co.uk/uSync/v9/settings/\";\r\n\r\n        vm.umbracoVersion = Umbraco.Sys.ServerVariables.application.version;\r\n\r\n        vm.saveSettings = saveSettings;\r\n        vm.openAppSettingsOverlay = openAppSettingsOverlay;\r\n\r\n        init();\r\n\r\n        ///////////\r\n\r\n        function init() {\r\n            getSettings();\r\n        }\r\n\r\n        ///////////\r\n        function getSettings() {\r\n\r\n            uSync8DashboardService.getSettings()\r\n                .then(function (result) {\r\n                    vm.settings = result.data;\r\n                    vm.loading = false;\r\n                    getHandlerSetSettings(vm.settings.defaultSet);\r\n                });\r\n        }\r\n\r\n        function getHandlerSetSettings(setname) {\r\n\r\n            uSync8DashboardService.getHandlerSetSettings(setname)\r\n                .then(function (result) {\r\n                    vm.handlerSet = result.data;\r\n                });\r\n\r\n        }\r\n\r\n\r\n        function saveSettings() {\r\n            vm.working = false;\r\n            uSync8DashboardService.saveSettings(vm.settings)\r\n                .then(function (result) {\r\n                    vm.working = false;\r\n                    notificationsService.success('Saved', 'Settings updated');\r\n                }, function (error) {\r\n                    notificationsService.error('Saving', error.data.Message);\r\n                });\r\n        }\r\n\r\n\r\n\r\n        function openAppSettingsOverlay() {\r\n\r\n            uSync8DashboardService.getChangedSettings()\r\n                .then(function (result) {\r\n                    var appSetting = {\r\n                        \"uSync\": toPascal(result.data)\r\n                    }\r\n\r\n                    var options = {\r\n                        view: Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/settings.overlay.html',\r\n                        title: 'appsettings.json snipped',\r\n                        content: JSON.stringify(appSetting, null, 4),\r\n                        docslink: vm.docslink,\r\n                        disableBackdropClick: true,\r\n                        disableEscKey: true,\r\n                        hideSubmitButton: true,\r\n                        submit: function () {\r\n                            overlayService.close();\r\n                        }\r\n                    };\r\n\r\n                    overlayService.confirm(options);\r\n                });\r\n\r\n        }\r\n\r\n\r\n        function toPascal(o) {\r\n            var newO, origKey, newKey, value\r\n            if (o instanceof Array) {\r\n                return o.map(function (value) {\r\n                    if (typeof value === \"object\") {\r\n                        value = toCamel(value)\r\n                    }\r\n                    return value\r\n                })\r\n            } else {\r\n                newO = {}\r\n                for (origKey in o) {\r\n                    if (o.hasOwnProperty(origKey)) {\r\n                        newKey = (origKey.charAt(0).toUpperCase() + origKey.slice(1) || origKey).toString()\r\n                        value = o[origKey]\r\n                        if (value instanceof Array || (value !== null && value.constructor === Object)) {\r\n                            value = toPascal(value)\r\n                        }\r\n                        newO[newKey] = value\r\n                    }\r\n                }\r\n            }\r\n            return newO\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSettingsController', settingsController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function uSyncController($scope, $q, $controller,\r\n        eventsService,\r\n        overlayService,\r\n        notificationsService,\r\n        localizationService,\r\n        editorService,\r\n        uSync8DashboardService,\r\n        uSyncHub) {\r\n\r\n        var vm = this;\r\n        vm.fresh = true;\r\n        vm.loading = true;\r\n        vm.versionLoaded = false;\r\n        vm.working = false;\r\n        vm.reported = false;\r\n        vm.syncing = false;\r\n        vm.hideLink = false;\r\n        vm.showSpinner = false;\r\n        vm.showEverything = true;\r\n\r\n        vm.selection = [];\r\n\r\n        vm.groups = [];\r\n        vm.perf = 0;\r\n\r\n        vm.showAdvanced = false;\r\n\r\n        vm.hasuSyncForms = false;\r\n\r\n        vm.canHaveForms = false;\r\n\r\n        var modes = {\r\n            NONE: 0,\r\n            REPORT: 1,\r\n            IMPORT: 2,\r\n            EXPORT: 3\r\n        };\r\n\r\n        vm.runmode = modes.NONE;\r\n\r\n        vm.showAll = false;\r\n        vm.status = {};\r\n        vm.reportAction = '';\r\n\r\n        vm.everything = {\r\n            icon: 'icon-paper-plane-alt color-deep-orange',\r\n            name: 'Everything',\r\n            group: '',\r\n            state: 'init',\r\n            key: 'everything'\r\n        }\r\n\r\n        vm.everything.import = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_import',\r\n                handler: function () { importItems(false, vm.everything); }\r\n            },\r\n            subButtons: [{\r\n                labelKey: 'usync_importforce',\r\n                handler: function () { importForce(vm.everything); }\r\n            }]\r\n        };\r\n\r\n        vm.everything.export = {\r\n            state: 'init',\r\n            defaultButton: {\r\n                labelKey: 'usync_export',\r\n                handler: function () { exportGroup(vm.everything); }\r\n            },\r\n            subButtons: [{\r\n                labelKey: 'usync_exportClean',\r\n                handler: function () { cleanExport(); }\r\n            }]\r\n        }\r\n\r\n        vm.report = report;\r\n        vm.versionInfo = {\r\n            IsCurrent: true\r\n        };\r\n\r\n        vm.importForce = importForce;\r\n        vm.importItems = importItems;\r\n        vm.importGroup = importGroup;\r\n        vm.exportGroup = exportGroup;\r\n\r\n        vm.getTypeName = getTypeName;\r\n\r\n        vm.showChange = showChange;\r\n        vm.countChanges = countChanges;\r\n        vm.calcPercentage = calcPercentage;\r\n        vm.openDetail = openDetail;\r\n\r\n\r\n        init();\r\n\r\n        function init() {\r\n            InitHub();\r\n            getHandlerGroups();\r\n            loadSavingsMessages();\r\n\r\n            // just so there is something there when you start \r\n            uSync8DashboardService.getHandlers()\r\n                .then(function (result) {\r\n                    vm.handlers = result.data;\r\n                    vm.status.handlers = vm.handlers;\r\n                });\r\n\r\n            uSync8DashboardService.checkVersion()\r\n                .then(function (result) {\r\n                    vm.versionLoaded = true;\r\n                    vm.versionInfo = result.data;\r\n                });\r\n        }\r\n\r\n        function performAction(options, actionMethod, cb) {\r\n\r\n            return $q(function (resolve, reject) {\r\n                uSync8DashboardService.getActionHandlers(options)\r\n                    .then(function (result) {\r\n                        vm.status.handlers = result.data;\r\n                        performHandlerAction(vm.status.handlers, actionMethod, options, cb)\r\n                            .then(function () {\r\n                                resolve();\r\n                            }, function (error) {\r\n                                reject(error)\r\n                            })\r\n                    });\r\n            });\r\n        }\r\n\r\n        function performHandlerAction(handlers, actionMethod, options, cb) {\r\n\r\n\r\n            return $q(function (resolve, reject) {\r\n\r\n                var index = 0;\r\n                vm.status.message = 'Starting ' + options.action;\r\n                vm.status.total = handlers.length - 1;\r\n\r\n                uSync8DashboardService.startProcess(options.action)\r\n                    .then(function () {\r\n                        runHandlerAction(handlers[index])\r\n                    });\r\n\r\n                function runHandlerAction(handler) {\r\n\r\n                    vm.status.message = handler.name;\r\n\r\n                    handler.status = 1;\r\n                    actionMethod(handler.alias, options, getClientId())\r\n                        .then(function (result) {\r\n\r\n                            vm.results = vm.results.concat(result.data.actions);\r\n\r\n                            handler.status = 2;\r\n                            handler.changes = countChanges(result.data.actions);\r\n\r\n                            index++;\r\n                            vm.status.count = index;\r\n\r\n                            if (index < handlers.length) {\r\n                                runHandlerAction(handlers[index]);\r\n                            }\r\n                            else {\r\n\r\n                                vm.status.message = 'Finishing ' + options.action;\r\n\r\n                                uSync8DashboardService.finishProcess(options.action, vm.results)\r\n                                    .then(function () {\r\n                                        resolve();\r\n                                    });\r\n                            }\r\n                        }, function (error) {\r\n                            // error in this handler ? \r\n                            // do we want to carry on with the other ones or just stop?\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        }\r\n\r\n        function report(group) {\r\n\r\n            if (vm.working === true) return;\r\n\r\n            vm.results = [];\r\n\r\n            resetStatus(modes.REPORT);\r\n            getWarnings('report');\r\n            group.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'report',\r\n                group: group.group\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.reportHandler)\r\n                .then(function (results) {\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.perf = performance.now() - start;\r\n                    vm.status.message = 'Report complete';\r\n                    group.state = 'success';\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    group.state = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function importForce(group) {\r\n            importItems(true, group);\r\n        }\r\n\r\n        function importItems(force, group) {\r\n\r\n            if (vm.working === true) return;\r\n\r\n            vm.results = [];\r\n            resetStatus(modes.IMPORT);\r\n            getWarnings('import');\r\n\r\n            group.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'import',\r\n                group: group.group,\r\n                force: force\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.importHandler)\r\n                .then(function (results) {\r\n\r\n                    vm.status.message = 'Post import actions';\r\n\r\n                    uSync8DashboardService.importPost(vm.results, getClientId())\r\n                        .then(function (results) {\r\n                            vm.working = false;\r\n                            vm.reported = true;\r\n                            vm.perf = performance.now() - start;\r\n                            group.state = 'success';\r\n                            eventsService.emit('usync-dashboard.import.complete');\r\n                            calculateTimeSaved(vm.results);\r\n                            vm.status.message = 'Complete';\r\n                        });\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    vm.group.state = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function exportGroup(group) {\r\n\r\n            if (vm.working === true) return;\r\n\r\n            vm.results = [];\r\n            resetStatus(modes.EXPORT);\r\n            group.state = 'busy';\r\n\r\n            var options = {\r\n                action: 'export',\r\n                group: group.group\r\n            };\r\n\r\n            var start = performance.now();\r\n\r\n            performAction(options, uSync8DashboardService.exportHandler)\r\n                .then(function (results) {\r\n                    vm.status.message = 'Export complete';\r\n                    vm.working = false;\r\n                    vm.reported = true;\r\n                    vm.perf = performance.now() - start;\r\n\r\n                    group.state = 'success';\r\n                    vm.savings.show = true;\r\n                    vm.savings.title = 'All items exported.';\r\n                    vm.savings.message = 'Now go wash your hands 🧼!';\r\n                    eventsService.emit('usync-dashboard.export.complete');\r\n                }, function (error) {\r\n                    vm.working = false;\r\n                    group.state = 'error';\r\n                    notificationsService.error('Error', error.data.ExceptionMessage ?? error.data.exceptionMessage);\r\n                });\r\n        }\r\n\r\n        function cleanExport() {\r\n\r\n            localizationService.localizeMany([\"usync_cleanTitle\",\r\n                \"usync_cleanMsg\", \"usync_cleanSubmit\", \"usync_cleanClose\"])\r\n                .then(function (values) {\r\n\r\n\r\n                    overlayService.open({\r\n                        title: values[0],\r\n                        content: values[1],\r\n                        disableBackdropClick: true,\r\n                        disableEscKey: true,\r\n                        submitButtonLabel: values[2],\r\n                        closeButtonLabel: values[3],\r\n                        submit: function () {\r\n                            overlayService.close();\r\n\r\n                            uSync8DashboardService.cleanExport()\r\n                                .then(function () {\r\n                                    exportGroup(vm.everything);\r\n                                });\r\n                        },\r\n                        close: function () {\r\n                            overlayService.close();\r\n                        }\r\n                    });\r\n                });\r\n        }\r\n\r\n        // add a little joy to the process.\r\n        function calculateTimeSaved(results) {\r\n            var changes = countChanges(results);\r\n            var time = changes * 26.5;\r\n\r\n            var duration = moment.duration(time, 'seconds');\r\n\r\n            if (time >= 180) {\r\n                vm.savings.show = true;\r\n\r\n                vm.savings.title = 'You just saved about ' + duration.humanize() + \"!\";\r\n                vm.savings.message = '';\r\n\r\n                for (let x = 0; x < vm.godo.length; x++) {\r\n                    if (vm.godo[x].time < time) {\r\n                        vm.savings.message = vm.godo[x].message;\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //////////////\r\n\r\n        function getWarnings(action) {\r\n            uSync8DashboardService.getSyncWarnings(action)\r\n                .then(function (result) {\r\n                    vm.warnings = result.data;\r\n                });\r\n        }\r\n\r\n        vm.importGroup = {};\r\n        vm.exportButtons = {};\r\n\r\n        function getHandlerGroups() {\r\n            vm.showEverything = false;\r\n\r\n            uSync8DashboardService.getHandlerGroups()\r\n                .then(function (result) {\r\n\r\n                    var groups = result.data;\r\n                    var isSingle = Object.keys(groups).length === 1;\r\n\r\n                    _.forEach(groups, function (icon, group) {\r\n                        if (group == '_everything') {\r\n                            vm.showEverything = true;\r\n                        }\r\n                        else {\r\n\r\n                            var groupInfo = {\r\n                                name: group,\r\n                                group: group,\r\n                                icon: icon,\r\n                                key: group.toLowerCase(),\r\n                                state: 'init'\r\n                            }\r\n\r\n                            groupInfo.import = {\r\n                                defaultButton: {\r\n                                    labelKey: 'usync_import',\r\n                                    handler: function () { importGroup(groupInfo) }\r\n                                },\r\n                                subButtons: [{\r\n                                    labelKey: 'usync_importforce',\r\n                                    handler: function () { importForce(groupInfo) }\r\n                                }]\r\n                            };\r\n\r\n                            groupInfo.export = {\r\n                                defaultButton: {\r\n                                    labelKey: 'usync_export',\r\n                                    handler: function () { exportGroup(groupInfo) }\r\n                                }                                \r\n                            };\r\n\r\n\r\n                            if (isSingle) {\r\n                                groupInfo.export.subButtons = [{\r\n                                    labelKey: 'usync_exportClean',\r\n                                    handler: function () {\r\n                                        cleanExport();\r\n                                    }\r\n                                }];\r\n                            }\r\n\r\n                            vm.groups.push(groupInfo);\r\n\r\n                            if (group.toLowerCase() === \"forms\") {\r\n                                vm.hasuSyncForms = true;\r\n                            }\r\n                        }\r\n\r\n                    });\r\n\r\n                    if (vm.showEverything) {\r\n                        vm.groups.push(vm.everything);\r\n                    }\r\n\r\n                    if (!vm.hasuSyncForms) {\r\n                        vm.canHaveForms = canHaveForms();\r\n                    }\r\n\r\n                    vm.loading = false;\r\n                }, function (error) {\r\n                    vm.loading = false;\r\n                });\r\n        }\r\n\r\n        function importGroup(group) {\r\n            importItems(false, group);\r\n        }\r\n\r\n        //////////////\r\n\r\n        function openDetail(item) {\r\n\r\n            var options = {\r\n                item: item,\r\n                title: 'uSync Change',\r\n                view: \"/App_Plugins/uSync/changeDialog.html\",\r\n                close: function () {\r\n                    editorService.close();\r\n                }\r\n            };\r\n            editorService.open(options);\r\n        }\r\n\r\n        function getTypeName(typeName) {\r\n            var umbType = typeName.substring(0, typeName.indexOf(','));\r\n            return umbType.substring(umbType.lastIndexOf('.') + 1);\r\n        }\r\n\r\n        function countChanges(changes) {\r\n            var count = 0;\r\n            angular.forEach(changes, function (val, key) {\r\n                if (val.change !== 'NoChange') {\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            return count;\r\n        }\r\n\r\n        function calcPercentage(status) {\r\n            return (100 * status.count) / status.Total;\r\n        }\r\n\r\n        function showChange(change) {\r\n            return vm.showAll || (change !== 'NoChange' && change !== 'Removed');\r\n        }\r\n\r\n        function setFilter(type) {\r\n\r\n            if (vm.filter === type) {\r\n                vm.filter = '';\r\n            }\r\n            else {\r\n                vm.filter = type;\r\n            }\r\n        }\r\n\r\n        ///////////\r\n\r\n        /// resets all the flags, and messages to the start \r\n        function resetStatus(mode) {\r\n\r\n            vm.fresh = false;\r\n            vm.warnings = {};\r\n\r\n            vm.reported = vm.showAll = false;\r\n            vm.working = true;\r\n            vm.showSpinner = false;\r\n            vm.runmode = mode;\r\n            vm.hideLink = false;\r\n            vm.savings.show = false;\r\n\r\n            vm.status = {\r\n                count: 0,\r\n                total: 1,\r\n                message: 'Initializing',\r\n                handlers: vm.handlers\r\n            };\r\n\r\n            if (!vm.hub.active) {\r\n                vm.status.Message = 'Working ';\r\n                vm.showSpinner = true;\r\n            }\r\n\r\n            vm.update = {\r\n                message: '',\r\n                count: 0,\r\n                total: 1\r\n            };\r\n\r\n            // performance timer. \r\n            vm.perf = 0;\r\n\r\n\r\n            switch (mode) {\r\n                case modes.IMPORT:\r\n                    vm.action = 'Import';\r\n                    break;\r\n                case mode.REPORT:\r\n                    vm.action = 'Report';\r\n                    break;\r\n                case mode.EXPORT:\r\n                    vm.action = 'Export';\r\n                    break;\r\n            }\r\n        }\r\n\r\n        ////// SignalR things \r\n        function InitHub() {\r\n            uSyncHub.initHub(function (hub) {\r\n\r\n                vm.hub = hub;\r\n\r\n                vm.hub.on('add', function (data) {\r\n                    vm.status = data;\r\n                });\r\n\r\n                vm.hub.on('update', function (update) {\r\n                    vm.update = update;\r\n                });\r\n\r\n                vm.hub.start();\r\n            });\r\n        }\r\n\r\n        function getClientId() {\r\n            if ($.connection !== undefined) {\r\n                return $.connection.connectionId;\r\n            }\r\n            return \"\";\r\n        }\r\n\r\n        function canHaveForms() {\r\n            if (vm.hasuSyncForms) return false;\r\n        }\r\n\r\n        function loadSavingsMessages() {\r\n            vm.savings = { show: false, title: \"\", message: \"\" };\r\n            vm.godo = [\r\n                { time: 0, message: \"Worth checking\" },\r\n                { time: 180, message: \"Go make a cup of tea\" },\r\n                { time: 300, message: \"Go have a quick chat\" },\r\n                { time: 900, message: \"Go for a nice walk outside 🚶‍♀️\" },\r\n                { time: 3600, message: \"You deserve a break\" }\r\n            ];\r\n\r\n            var keys = [];\r\n            for (let n = 0; n < 5; n++) {\r\n                keys.push('usync_godo' + n);\r\n            }\r\n            localizationService.localizeMany(keys)\r\n                .then(function (values) {\r\n                    for (let n = 0; n < values.length; n++) {\r\n                        vm.godo[n].message = values[n];\r\n                    }\r\n                });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSync8Controller', uSyncController);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    function dashboardController($controller,\r\n        $scope, $timeout, navigationService, eventsService, uSync8DashboardService) {\r\n\r\n        var vm = this;\r\n\r\n        vm.selectNavigationItem = function (item) {\r\n            eventsService.emit('usync-dashboard.tab.change', item);\r\n        }\r\n\r\n        vm.page = {\r\n            title: 'uSync',\r\n            description: '...',\r\n            navigation: [\r\n                {\r\n                    'name': 'uSync',\r\n                    'alias': 'uSync',\r\n                    'icon': 'icon-infinity',\r\n                    'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/default.html',\r\n                    'active': true\r\n                },\r\n                {\r\n                    'name': 'Settings',\r\n                    'alias': 'settings',\r\n                    'icon': 'icon-settings',\r\n                    'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/settings.html'\r\n                } \r\n            ]\r\n        };\r\n\r\n        $timeout(function () {\r\n            navigationService.syncTree({ tree: \"uSync\", path: \"-1\" });\r\n        });\r\n\r\n        uSync8DashboardService.getAddOns()\r\n            .then(function (result) {\r\n\r\n                vm.version = 'v' + result.data.version;\r\n                if (result.data.addOnString.length > 0) {\r\n                    vm.version += ' + ' + result.data.addOnString;\r\n                }\r\n\r\n                vm.page.description = vm.version;\r\n                vm.addOns = result.data.addOns;\r\n\r\n                var insertOffset = 1;\r\n                if (vm.version.indexOf('Complete') == -1) {\r\n                     insertOffset = 2;\r\n                     vm.page.navigation.push(\r\n                         {\r\n                             'name': 'Add ons',\r\n                             'alias': 'expansion',\r\n                             'icon': 'icon-box',\r\n                             'view': Umbraco.Sys.ServerVariables.umbracoSettings.appPluginsPath + '/uSync/settings/expansion.html'\r\n                         });\r\n                }\r\n\r\n                vm.addOns.forEach(function (value, key) {\r\n                    if (value.view !== '') {\r\n                        vm.page.navigation.splice(vm.page.navigation.length - insertOffset, 0,\r\n                            {\r\n                                'name': value.displayName,\r\n                                'alias': value.alias,\r\n                                'icon': value.icon,\r\n                                'view': value.view\r\n                            });\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    angular.module('umbraco')\r\n        .controller('uSyncSettingsDashboardController', dashboardController);\r\n})();"]}